import React, { useState } from 'react';
import { Product } from '@/types/Product';
import axios from "axios";
import Cookies from "js-cookie";
import { CORE_API_URL } from "@/config";
import { ethers } from "ethers";
import contractAbi from "../contract_config/PayRouter.json";



declare global {
  interface Window {
    ethereum?: any;
  }
}

interface PayParams {
  contract_address: string;
  order_id: number | string;
  seller_address: string;
  price_wei: string; // –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–æ–π!
}

interface CartProductCardProps {
  product: Product;
  onRemove: (productId: number) => void;
  onUpdate: () => Promise<void>;
}

const CartProductCard: React.FC<CartProductCardProps> = ({
  product,
  onRemove,
  onUpdate,
}) => {
  const [isPaid, setIsPaid] = useState(false);
  const [isSelected, setIsSelected] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleRemove = async () => {
    setError(null);
    try {
      const token = Cookies.get("token");
      if (!token) {
        setError("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.");
        return;
      }
      await axios.post(
        `${CORE_API_URL}/protected/removeFromCart`,
        { id: product.id },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      onRemove(product.id);
    } catch (err) {
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.");
    }
  };

  // Pay onchain —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
  async function payOnChain(payParams: PayParams): Promise<boolean> {
    const { contract_address, order_id, seller_address, price_wei } = payParams;
    if (!window.ethereum) {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask!");
      console.log("–ú–µ—Ç–∞–º–∞—Å–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
      return false;
    }

    try {
      console.log("—Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å")
      setIsLoading(true);
      setError(null);
      const provider = new ethers.BrowserProvider(window.ethereum);
      const signer = await provider.getSigner();
      const contract = new ethers.Contract(contract_address, contractAbi.abi, signer);
      await provider.send("eth_requestAccounts", []);
      const tx = await contract.payForProduct(
        order_id, seller_address, { value: price_wei }
      );
      await tx.wait();
      alert("–¢–æ–≤–∞—Ä –æ–ø–ª–∞—á–µ–Ω, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è hash: " + tx.hash);
      return true;
    } catch (e: any) {
      setError("–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã: " + (e?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"));
      return false;
    } finally {
      setIsLoading(false);
    }
  }

  const handlePayment = async () => {
    setIsLoading(true);
    setError(null);
    try {
      const token = Cookies.get("token");
      if (!token) {
        setError("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.");
        setIsLoading(false);
        return;
      }
      // –ü–æ–ª—É—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã!
      const response = await axios.post(
        `${CORE_API_URL}/Protected/BuyProduct`,
        { id: product.id },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (response.status === 200 && response.data) {
        // –ü—Ä–∏–≤–µ–¥–∏ response.data –∫ —Ç–∏–ø—É PayParams –∏–ª–∏ –ø–æ–¥—Å—Ç—Ä–æ–π
        // –ï—Å–ª–∏ price_wei –Ω–µ —Å—Ç—Ä–æ–∫–∞ - –ø–µ—Ä–µ–≤–µ–¥–∏:
        const priceEth = response.data.Price ?? response.data.price; // –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ backend –∏–∑–º–µ–Ω–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä/—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if (!priceEth && priceEth !== 0) {
          setError("–û—à–∏–±–∫–∞: –ø–æ–ª–µ Price –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞");
          return;
        }
        const priceStr = priceEth.toFixed(18).replace(/\.?0+$/, ''); // —É–¥–∞–ª–∏—Ç –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
        const price_wei = ethers.parseEther(priceStr).toString();
        const payParams: PayParams = {
          contract_address: response.data.Address,         // –∏–ª–∏ contract_address, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–µ –∏–º—è —É –ø–æ–ª—è
          order_id:       response.data.OrderId,           // –∏–ª–∏ orderId
          seller_address: response.data.SellerAddress,     // –∏–ª–∏ seller_address
          price_wei,                                       // –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Å—á–∏—Ç–∞–ª–∏
        };
        console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ payOnChain payParams:", payParams);
        const payRes = await payOnChain(payParams);
        console.log("payRes", payRes)
        if (payRes) setIsPaid(true);
      } else {
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.");
      }
      onUpdate();
    } catch (error: any) {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞: " + (error?.message || ""));
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelivery = async () => {
    setIsLoading(true);
    setError(null);
    try {
      const token = Cookies.get("token");
      if (!token) {
        setError("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.");
        setIsLoading(false);
        return;
      }
      await axios.post(
        `${CORE_API_URL}/protected/deliveryGoods`,
        { id: product.id },
        { headers: { Authorization: `Bearer ${token}` } }
      );
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –Ω–µ—É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSelection = () => setIsSelected((prev) => !prev);

  // "—Å–µ—Ä—ã–π" –±–ª–æ–∫, –µ—Å–ª–∏ –∫—É–ø–ª–µ–Ω–æ
  const cardClass = [
    "flex items-center rounded-lg shadow-md p-4 relative",
    isSelected ? "border-2 border-GoldenYellow" : "",
    product.is_buy ? "bg-GrayishBlue" : "bg-PastelBlue"
  ].join(" ");

  return (
    <div className={cardClass}>
      {!product.is_buy && (
        <button onClick={handleRemove}
          className="absolute top-2 right-2 text-red-500 hover:text-red-600"
          disabled={isLoading}
        >
          üóëÔ∏è
        </button>
      )}

      <div className="flex flex-grow flex-col md:flex-row items-center">
        <img
          src={product.image}
          alt={product.title}
          className="w-24 h-24 object-cover rounded-lg mr-4"
        />
        <div className="flex-grow">
          <h3 className="text-DarkOceanBlue font-semibold">
            {product.is_buy ? "[–û–ü–õ–ê–ß–ï–ù–û] " + product.title : product.title}
          </h3>
          <p className="text-DarkOceanBlue text-sm">{product.description}</p>
          <hr className="my-2 border-t border-DarkOceanBlue w-1/2" />
          <p className="text-DarkOceanBlue text-sm">
            –ü—Ä–æ–¥–∞–≤–µ—Ü: {product.Seller.user_name}
          </p>
          <p className="text-DarkOceanBlue text-sm">
            ‚ú¶{Number(product.Seller.rating.toFixed(2)).toLocaleString("en", { 
              useGrouping: false, 
              maximumFractionDigits: 2
            })} ‚Ä¢ {product.Seller.count_rating} –æ—Ü–µ–Ω–æ–∫
          </p>
        </div>
        <div className="flex flex-col items-end">
          <button
            className={
              "mt-10 px-4 py-2 rounded text-white " +
              (product.is_buy ? "bg-DarkSlateBlue hover:bg-DeepTealBlue" : "bg-DarkSlateBlue hover:bg-DeepTealBlue")
            }
            onClick={product.is_buy ? handleDelivery : handlePayment}
            disabled={isLoading}
          >
            {isLoading
              ? "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è..."
              : product.is_buy
                ? "–î–æ—Å—Ç–∞–≤–∏—Ç—å"
                : `–û–ø–ª–∞—Ç–∏—Ç—å: ${Number(product.price.toFixed(9)).toLocaleString("en", {
                    useGrouping: false,
                    maximumFractionDigits: 9,
                  })} ETH`}
          </button>
        </div>
      </div>
      {error && <p className="text-red-500 text-sm mt-2">{error}</p>}
    </div>
  );
};

export default CartProductCard;